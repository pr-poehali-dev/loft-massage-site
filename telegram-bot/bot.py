import os
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import json

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏
class BookingStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_date = State()
    waiting_for_time = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: [–Ω–∞—á–∞–ª–æ, –∫–æ–Ω–µ—Ü, –ø–µ—Ä–µ—Ä—ã–≤_–Ω–∞—á–∞–ª–æ, –ø–µ—Ä–µ—Ä—ã–≤_–∫–æ–Ω–µ—Ü])
WORK_SCHEDULE = {
    0: ["11:00", "14:00", "17:00", "20:00"],  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (—É—Ç—Ä–æ 11-14, –≤–µ—á–µ—Ä 17-20)
    1: None,  # –í—Ç–æ—Ä–Ω–∏–∫ - –≤—ã—Ö–æ–¥–Ω–æ–π
    2: ["11:00", "14:00", "17:00", "20:00"],  # –°—Ä–µ–¥–∞ (—É—Ç—Ä–æ 11-14, –≤–µ—á–µ—Ä 17-20)
    3: None,  # –ß–µ—Ç–≤–µ—Ä–≥ - –≤—ã—Ö–æ–¥–Ω–æ–π
    4: ["11:00", "14:00", "17:00", "20:00"],  # –ü—è—Ç–Ω–∏—Ü–∞ (—É—Ç—Ä–æ 11-14, –≤–µ—á–µ—Ä 17-20)
    5: ["09:00", "20:00", None, None],         # –°—É–±–±–æ—Ç–∞ (–±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞, 9-20)
    6: ["09:00", "20:00", None, None]  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞, 9-20)
}

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
SESSION_DURATION = 60

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø–∏—Å–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
bookings = {}

def load_bookings():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global bookings
    try:
        with open('bookings.json', 'r', encoding='utf-8') as f:
            bookings = json.load(f)
    except FileNotFoundError:
        bookings = {}

def save_bookings():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª"""
    with open('bookings.json', 'w', encoding='utf-8') as f:
        json.dump(bookings, f, ensure_ascii=False, indent=2)

def get_available_times(date_str: str):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        date_obj = datetime.strptime(date_str, "%d.%m.%Y")
    except ValueError:
        return []
    
    weekday = date_obj.weekday()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –º–∞—Å—Å–∞–∂–∏—Å—Ç –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
    if WORK_SCHEDULE[weekday] is None:
        return []
    
    schedule = WORK_SCHEDULE[weekday]
    available_slots = []
    
    # –î–ª—è –ü–Ω, –°—Ä, –ü—Ç: –¥–≤–∞ —Ä–∞–±–æ—á–∏—Ö –æ–∫–Ω–∞ (—É—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä)
    if weekday in [0, 2, 4]:
        morning_start, morning_end, evening_start, evening_end = schedule
        
        # –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ—Ç—ã (11:00-14:00)
        current_time = datetime.strptime(morning_start, "%H:%M")
        end_time = datetime.strptime(morning_end, "%H:%M")
        
        while current_time < end_time:
            time_str = current_time.strftime("%H:%M")
            booking_key = f"{date_str}_{time_str}"
            if booking_key not in bookings:
                available_slots.append(time_str)
            current_time += timedelta(minutes=SESSION_DURATION)
        
        # –í–µ—á–µ—Ä–Ω–∏–µ —Å–ª–æ—Ç—ã (17:00-20:00)
        current_time = datetime.strptime(evening_start, "%H:%M")
        end_time = datetime.strptime(evening_end, "%H:%M")
        
        while current_time < end_time:
            time_str = current_time.strftime("%H:%M")
            booking_key = f"{date_str}_{time_str}"
            if booking_key not in bookings:
                available_slots.append(time_str)
            current_time += timedelta(minutes=SESSION_DURATION)
    
    # –î–ª—è –°–±, –í—Å: –æ–¥–∏–Ω –¥–ª–∏–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (9:00-20:00)
    else:
        work_start, work_end = schedule[0], schedule[1]
        current_time = datetime.strptime(work_start, "%H:%M")
        end_time = datetime.strptime(work_end, "%H:%M")
        
        while current_time < end_time:
            time_str = current_time.strftime("%H:%M")
            booking_key = f"{date_str}_{time_str}"
            if booking_key not in bookings:
                available_slots.append(time_str)
            current_time += timedelta(minutes=SESSION_DURATION)
    
    return available_slots

def is_date_available(date_str: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –º–∞—Å—Å–∞–∂–∏—Å—Ç –≤ —ç—Ç—É –¥–∞—Ç—É"""
    try:
        date_obj = datetime.strptime(date_str, "%d.%m.%Y")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if date_obj.date() < datetime.now().date():
            return False
        
        weekday = date_obj.weekday()
        return WORK_SCHEDULE[weekday] is not None
    except ValueError:
        return False

def get_time_keyboard(available_times):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏"""
    if not available_times:
        return ReplyKeyboardRemove()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ª–æ—Ç—ã –ø–æ 3 –≤ —Ä—è–¥
    keyboard = []
    row = []
    for time in available_times:
        row.append(KeyboardButton(text=time))
        if len(row) == 3:
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞—Å—Å–∞–∂.\n\n"
        "üìã –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n"
        "–ü–Ω, –°—Ä, –ü—Ç: 11:00-14:00 –∏ 17:00-20:00\n"
        "–°–±, –í—Å: 09:00-20:00\n"
        "–í—Ç, –ß—Ç: –í—ã—Ö–æ–¥–Ω—ã–µ\n\n"
        "‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞: 30-60 –º–∏–Ω—É—Ç\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /book –¥–ª—è –∑–∞–ø–∏—Å–∏.",
        reply_markup=ReplyKeyboardRemove()
    )

# –ö–æ–º–∞–Ω–¥–∞ /book - –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
@dp.message(Command("book"))
async def cmd_book(message: Message, state: FSMContext):
    await state.set_state(BookingStates.waiting_for_name)
    await message.answer(
        "üìù –ù–∞—á–Ω–µ–º –∑–∞–ø–∏—Å—å!\n\n"
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        reply_markup=ReplyKeyboardRemove()
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@dp.message(BookingStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(BookingStates.waiting_for_phone)
    
    phone_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True
    )
    
    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}!\n\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=phone_keyboard
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(BookingStates.waiting_for_phone, F.contact)
async def process_phone_contact(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await state.set_state(BookingStates.waiting_for_date)
    await message.answer(
        "üìÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏.\n\n"
        "üìã –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n"
        "–ü–Ω, –°—Ä, –ü—Ç: 11:00-14:00 –∏ 17:00-20:00\n"
        "–°–±, –í—Å: 09:00-20:00\n"
        "–í—Ç, –ß—Ç: –í—ã—Ö–æ–¥–Ω—ã–µ\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.10.2025)",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(BookingStates.waiting_for_phone)
async def process_phone_text(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(BookingStates.waiting_for_date)
    await message.answer(
        "üìÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏.\n\n"
        "üìã –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n"
        "–ü–Ω, –°—Ä, –ü—Ç: 11:00-14:00 –∏ 17:00-20:00\n"
        "–°–±, –í—Å: 09:00-20:00\n"
        "–í—Ç, –ß—Ç: –í—ã—Ö–æ–¥–Ω—ã–µ\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.10.2025)",
        reply_markup=ReplyKeyboardRemove()
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã
@dp.message(BookingStates.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    date_str = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    try:
        date_obj = datetime.strptime(date_str, "%d.%m.%Y")
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.10.2025"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
    if date_obj.date() < datetime.now().date():
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –º–∞—Å—Å–∞–∂–∏—Å—Ç –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
    weekday = date_obj.weekday()
    if WORK_SCHEDULE[weekday] is None:
        await message.answer(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    available_times = get_available_times(date_str)
    
    if not available_times:
        await message.answer(
            f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ {date_str} –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É."
        )
        return
    
    await state.update_data(date=date_str)
    await state.set_state(BookingStates.waiting_for_time)
    
    day_name = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"][weekday]
    
    await message.answer(
        f"üìÖ {day_name}, {date_str}\n\n"
        f"üïê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã ({len(available_times)}):\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
        reply_markup=get_time_keyboard(available_times)
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
@dp.message(BookingStates.waiting_for_time)
async def process_time(message: Message, state: FSMContext):
    time_str = message.text.strip()
    data = await state.get_data()
    date_str = data['date']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–Ω–æ
    available_times = get_available_times(date_str)
    if time_str not in available_times:
        await message.answer(
            "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö."
        )
        return
    
    await state.update_data(time=time_str)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    booking_key = f"{date_str}_{time_str}"
    bookings[booking_key] = {
        "name": data['name'],
        "phone": data['phone'],
        "date": date_str,
        "time": time_str,
        "user_id": message.from_user.id,
        "username": message.from_user.username
    }
    save_bookings()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    confirmation = (
        "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        f"üïê –í—Ä–µ–º—è: {time_str}\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 60 –º–∏–Ω—É—Ç\n\n"
        "üìç –ñ–¥—É –≤–∞—Å! –°–∫–æ—Ä–æ —Å–≤—è–∂—É—Å—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myBookings"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await message.answer(confirmation, reply_markup=ReplyKeyboardRemove())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_message = (
        "üîî –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –º–∞—Å—Å–∞–∂!\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        f"üïê –í—Ä–µ–º—è: {time_str}\n"
        f"üë®‚Äçüíº Telegram: @{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üÜî ID: {message.from_user.id}"
    )
    
    if ADMIN_CHAT_ID:
        await bot.send_message(ADMIN_CHAT_ID, admin_message)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π
@dp.message(Command("myBookings"))
async def cmd_my_bookings(message: Message):
    user_id = message.from_user.id
    user_bookings = []
    
    for key, booking in bookings.items():
        if booking['user_id'] == user_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
            booking_datetime = datetime.strptime(f"{booking['date']} {booking['time']}", "%d.%m.%Y %H:%M")
            if booking_datetime >= datetime.now():
                user_bookings.append((key, booking))
    
    if not user_bookings:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π
    message_text = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
    
    for key, booking in user_bookings:
        message_text += (
            f"üìÖ {booking['date']} –≤ {booking['time']}\n"
            f"üë§ {booking['name']}\n\n"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    keyboard = []
    for key, booking in user_bookings:
        keyboard.append([InlineKeyboardButton(
            text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {booking['date']} {booking['time']}",
            callback_data=f"cancel_{key}"
        )])
    
    await message.answer(
        message_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
@dp.callback_query(F.data.startswith("cancel_"))
async def process_cancel(callback: F.CallbackQuery):
    booking_key = callback.data.replace("cancel_", "")
    
    if booking_key in bookings:
        booking = bookings[booking_key]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–ø–∏—Å—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if booking['user_id'] == callback.from_user.id:
            del bookings[booking_key]
            save_bookings()
            
            await callback.message.answer(
                f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ {booking['date']} –≤ {booking['time']} –æ—Ç–º–µ–Ω–µ–Ω–∞."
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            if ADMIN_CHAT_ID:
                await bot.send_message(
                    ADMIN_CHAT_ID,
                    f"‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º:\n"
                    f"üìÖ {booking['date']} {booking['time']}\n"
                    f"üë§ {booking['name']}\n"
                    f"üì± {booking['phone']}"
                )
        else:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞–ø–∏—Å—å!", show_alert=True)
    else:
        await callback.answer("–ó–∞–ø–∏—Å—å —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
    
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏
@dp.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /book –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.",
        reply_markup=ReplyKeyboardRemove()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    load_bookings()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(bookings)}")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())